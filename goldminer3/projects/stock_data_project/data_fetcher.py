\nfrom datetime import datetime\nimport pandas as pd\nfrom gm.api import history, get_symbol_infos, subscribe, unsubscribe\nimport logging\nfrom .database import DB_ENGINE\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n\ndef fetch_stock_symbols():\n    \"\"\"Fetch all stock symbols using Quantaxis API\"\"\"\n    try:\n        symbols = get_symbol_infos()\n        symbols = pd.DataFrame(symbols)\n        symbols = symbols[['symbol', 'name', 'exchange']]\n        return symbols\n    except Exception as e:\n        logger.error(f\"Failed to fetch stock symbols: {str(e)}\")\n        return pd.DataFrame()\n\n\ndef fetch_daily_data(symbol, date):\n    \"\"\"Fetch daily data for a single stock\"\"\"\n    try:\n        data = history(\n            symbol=symbol,\n            start_time=f\"{date} 09:30:00\",\n            end_time=f\"{date} 15:00:00\",\n            frequency='1d',\n            fields='symbol,open,high,low,close,volume',\n            df=True\n        )\n        if not data.empty:\n            return data\n        return pd.DataFrame()\n    except Exception as e:\n        logger.error(f\"Failed to fetch daily data for {symbol}: {str(e)}\")\n        return pd.DataFrame()\n\n\ndef fetch_minute_data(symbol, date):\n    \"\"\"Fetch minute data for a single stock\"\"\"\n    try:\n        data = history(\n            symbol=symbol,\n            start_time=f\"{date} 09:30:00\",\n            end_time=f\"{date} 15:00:00\",\n            frequency='1min',\n            fields='symbol,open,high,low,close,volume',\n            df=True\n        )\n        if not data.empty:\n            return data\n        return pd.DataFrame()\n    except Exception as e:\n        logger.error(f\"Failed to fetch minute data for {symbol}: {str(e)}\")\n        return pd.DataFrame()\n\n\ndef update_daily_data(date=None):\n    \"\"\"Update daily data for all stocks\"\"\"\n    try:\n        if not date:\n            date = datetime.now().strftime('%Y-%m-%d')\n        \n        symbols = fetch_stock_symbols()\n        data = []\n        \n        for symbol in symbols['symbol'].tolist():\n            daily_data = fetch_daily_data(symbol, date)\n            if not daily_data.empty:\n                data.append(daily_data)\n        \n        if data:\n            df = pd.concat(data, ignore_index=True)\n            with DB_ENGINE.connect() as conn:\n                df.to_sql('daily_data', conn, if_exists='append', index=False)\n                logger.info(f\"Daily data updated for {len(data)} symbols\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to update daily data: {str(e)}\")\n        return False\n\n\ndef update_minute_data(date=None):\n    \"\"\"Update minute data for all stocks\"\"\"\n    try:\n        if not date:\n            date = datetime.now().strftime('%Y-%m-%d')\n        \n        symbols = fetch_stock_symbols()\n        data = []\n        \n        for symbol in symbols['symbol'].tolist():\n            minute_data = fetch_minute_data(symbol, date)\n            if not minute_data.empty:\n                data.append(minute_data)\n        \n        if data:\n            df = pd.concat(data, ignore_index=True)\n            with DB_ENGINE.connect() as conn:\n                df.to_sql('minute_data', conn, if_exists='append', index=False)\n                logger.info(f\"Minute data updated for {len(data)} symbols\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to update minute data: {str(e)}\")\n        return False\n
